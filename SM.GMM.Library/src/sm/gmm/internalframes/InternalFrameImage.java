/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package sm.gmm.internalframes;

import java.awt.BorderLayout;
import java.awt.Dimension;
import javax.swing.JInternalFrame;
import sm.gmm.graphics.PaintConfig;
import sm.gmm.ui.Canvas;
import sm.gmm.ui.ComponentsManager;
import sm.gmm.listeners.IFunctionToFire;
import sm.gmm.listeners.eventName;

/**
 * Custom class that inherits from JInternalFrame
 * @author Gonzalo
 */
public class InternalFrameImage extends JInternalFrame
{
    /**
     * The canvas to be shown.
     */
    Canvas canvas;
    
    /**
     * Constructor class.
     * @param c The canvas object to be added.
     * @param pos The initial postiion of the InternalFrameImage.
     * @param width The InternalFrameImage width.
     * @param height The InternalFrameImage height.
     * @param title The InternalFrameImage titel.
     */
    public InternalFrameImage(Canvas c, int pos, int width, int height, String title) 
    {
        initComponents();
        addFocusListeners();
        canvas = c;
        javax.swing.GroupLayout lienzoLayout = new javax.swing.GroupLayout(canvas);
        canvas.setLayout(lienzoLayout);
        lienzoLayout.setHorizontalGroup(
            lienzoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 88, Short.MAX_VALUE)
        );
        lienzoLayout.setVerticalGroup(
            lienzoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );

        getContentPane().add(canvas,  BorderLayout.CENTER);
        
        super.setSize(width, height);
        super.setPreferredSize(new Dimension(width, height));
        super.setMinimumSize(new Dimension(width, height));
        super.setTitle(title);
        super.setName(title);
        super.setVisible(true);
        super.setLocation(pos, pos); 
        super.setFocusable(true);
        super.setEnabled(true);
    }
        
    /**
     * Method to add a focusListener function.
     */
    public void addFocusListeners()
    {
        IFunctionToFire funcFocusGained = (Object o) -> 
        { 
            formFocusGained();
        };
        
        ComponentsManager.addFocusListener(funcFocusGained, eventName.FOCUSGAINED, this);
        
        IFunctionToFire funcFocusLost = (Object o) -> 
        { 
            formFocusLost();
        };
        
        ComponentsManager.addFocusListener(funcFocusLost, eventName.FOCUSLOST, this);
    }
    
    /**
     * When the focus is gained, calls the canvas to sent related CanvasEvent.
     */
    public void formFocusGained()
    {
        canvas.notifyPaintConfigAndCurrentShapes();
    }
    
    /**
     * When the focus is lost
     */
    public void formFocusLost()
    {
        canvas.setBoundingBoxToShapes(false);
    }


    /**
     * Sets the PaintConfig to the canvas variable
     * @param pc PaintConfig parameter to be assigned to the Canvas
     */
    public void setPaintConfig(PaintConfig pc)
    {
        this.canvas.setPaintConfig(pc);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setMaximumSize(null);
        setMinimumSize(null);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Method for the Closing InternalFrameImage event that notify it's Canvas and the parent desktop to close other ui components if needed.
     * @param evt The InternalFrameEvent event object.
     */
    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        if (canvas!= null)
        {
            canvas.notifyClosingCanvas();
        }
    }//GEN-LAST:event_formInternalFrameClosing


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    /**
     * Method to get the inner Canvas.
     * @return The inner Canvas.
     */
    public Canvas getCanvas() 
    {
        return canvas;
    }
}
